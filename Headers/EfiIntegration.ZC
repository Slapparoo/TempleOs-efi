
CApplicationPointers appPtrs;
CEfiSimpleTextOutputInterface *ConOut;// = appPtrs.efi->ConOut;
CEfiBootServices *BS; // appPtrs.efi->BootServices
CEfiRuntimeServices *RT; // appPtrs.efi->BootServices
CEfiSystemTable *ST;
CEfiSimpleInputInterface *ConIn;
CEfiLoadedImageProtocol LoadedImageProtocol_;
CEfiLoadedImageProtocol * LoadedImageProtocol;
CEfiGop * GOP;// = FixPtr(&gop);
CEfiSimplePointerProtocol *SimplePointer;
CEfiSimpleFileSystemProtocol *SimpleFileSystem;
U8* SMBios;
U8* Acpi;
U8* Acpi20;
U8* Mps;
U8* SMBios3;


U16 wchar[STR_LEN]; 
U16 * lWchar;
U8* hexChars = "0123456789ABCDEF";


// very basic char to wchar (probably alpha letters only)
U0 ToWChar(U8 * src, U16 *dst) {
  for (; *src != 0; src++, dst++) {
    *dst = (*src & 0xFF)(U16);
  }
//  dst++ ;
  *dst++ = 0;
}


U16* AsWChar(U8 * src) {
  ToWChar(src, lWchar);
  return lWchar;
}


/**
Efi methods expect the first 4 parameters in teh registers RCX, RDX, R8, R9
they also expec 4 * 8 Bytes of space available in the callers local variable space

The U64 reg RCX p1 indicates to teh compiler you want that variable in that register

This isn't really ment to be called directly usedefine spring board method and use that instead

*/
#exe{Option(OPTf_WARN_DUP_TYPES, OFF);}
#exe{Option(OPTf_WARN_UNUSED_VAR, OFF);}


#define EFI_CALL_PAD_U64 5 // 0x28, decimal 40


/**
The parameters for this method are resolved at compiletime, what we need is the runtime values
the the "this" and "dest" are only offsets to where the values can be found
*/
U64 EfiOOCall4(U64 reg RDX p2, U64 reg R8 p3, U64 reg R9 p4, U64 this, U64 dest) {
  U64 reg RCX thisP = (*FixPtr(this)(U64*))(U8*); 
  U64 reg RBX destP = thisP(U8*)[dest](U64);

  U64 pad[EFI_CALL_PAD_U64];

  XOR  RAX, RAX
  CALL RBX
  MOV  RSP, RBP 
}

/**
The Object is still required so the function pointer can be picked out
*/
U64 EfiCall4(U64 reg RCX p1, U64 reg RDX p2, U64 reg R8 p3, U64 reg R9 p4, U8* this, U64 dest) {
  U64 thisP = (*FixPtr(this)(U64*))(U8*); 
  U64 reg RBX destP = thisP(U8*)[dest](U64);

  U64 pad[EFI_CALL_PAD_U64];

  XOR  RAX, RAX
  CALL RBX
  MOV  RSP, RBP 
}

/**
The Object is still required so the function pointer can be picked out
*/
U64 EfiCall5(U64 reg RCX p1, U64 reg RDX p2, U64 reg R8 p3, U64 reg R9 p4, U64 p5, U8* this, U64 dest) {
  U64 thisP = (*FixPtr(this)(U64*))(U8*); 
  U64 reg RBX destP = thisP(U8*)[dest](U64);

  U64 pad[EFI_CALL_PAD_U64];
  pad[4] = p5;

  XOR  RAX, RAX
  CALL RBX
  MOV  RSP, RBP 
}



U64 EfiCallWrapperOrdered(U64 reg RCX p1, U64 reg RDX p2, U64 reg R8 p3, U64 reg R9 p4, U64 reg RBX dest) {
// Create 4 * U64 in the methods stack
  U64 pad[EFI_CALL_PAD_U64];

  XOR  RAX, RAX
  CALL RBX
  MOV  RSP, RBP
}


/**
Used for "OO" style calls where the Object(this)  is the first paramater pass to Efi
*/
U64 EfiCallWrapper(U64 reg RDX p2, U64 reg R8 p3, U64 reg R9 p4, U64 reg RCX this, U64 reg RBX dest) {
// Create 4 * U64 in the methods stack
  U64 pad[EFI_CALL_PAD_U64];

  XOR  RAX, RAX
  CALL RBX
  MOV  RSP, RBP
}


U64 EfiCallWrapper5(U64 reg RDX p2, U64 reg R8 p3, U64 reg R9 p4, U64 p5, U64 reg RCX this, U64 reg RBX dest) {
// Create 4 * U64 in the methods stack
  U64 pad[EFI_CALL_PAD_U64];
  pad[4] = p5;

  XOR  RAX, RAX
  CALL RBX
  MOV  RSP, RBP 
}




/** This should only be required during early bringup- but its used by print */
public U64 EfiPrint(U16 *wString) {
  return EfiCallWrapper(wString, 0, 0, ConOut, ConOut->OutputString);
}

#exe{Option(OPTf_WARN_DUP_TYPES, ON);}
#exe{Option(OPTf_WARN_UNUSED_VAR, ON);}


/**
Most things are passing relitive pointers which is no good it needs virtual address pointers

See also RuntimeServices.ConvertPointer, this may need to be done dynamically, all the time?
*/
U8* FixPtr(U8 *ptr) {
  // the Application addres is set the efi file headers
  if (ptr > APPLICATION_ADDRESS) {
    return ptr;
  } else {
    return ptr + APPLICATION_ADDRESS;
  }
}

U0 Print(U8 *fmt,...) {
//{//\dLK,"Print(\"\") Fmt Strings",A="FI:::/Doc/Print.DD"\d.  See \dLK,"StrPrintJoin",A="MN:StrPrintJoin"\d().
//Don't use this.  \dLK,"See Print() shortcut.",A="FF:::/Doc/HolyC.DD,DemoHolyC"\d

// @TODO - implement

/*  U8 *buf=StrPrintJoin(NULL,fmt,argc,argv);
  I64 len=StrLen(buf),i;
  for(i=0;i!=len;i++) {
    if (Bt(&(Fs->task_flags),TASKf_INPUT_FILTER_TASK))
      Message(MESSAGE_KEY_DOWN,buf[i],0,1<<JOBf_DONT_FILTER);
  }
  if(!Bt(&(Fs->display_flags),DISPLAYf_SILENT)&&!Bt(&(Fs->task_flags),TASKf_INPUT_FILTER_TASK))
    (*fp_puts2)(buf);
  Free(buf);
*/

  // only prints the str not parameters so dont do anything fancy


  fmt = FixPtr(fmt);

  ToWChar(fmt, lWchar);

  EfiPrint(lWchar);
}

U0 PrintGuid(CEfiGuid * guid) {
  U64 i = 0;

  "{"; printHexU32(guid->Data1); 
  "-";  printHexU16(guid->Data2); 
  "-"; printHexU16(guid->Data3); 
  "-"; 
  for (; i < 8; printHexU8(guid->Data4[i++]));
  "} "; 

//  i = 0;
//  for (; i < 16; printHexU8(guid(U8*)[i++]));

}

public U0 printHexU8(U8 key) {
  U8* hChar = FixPtr(hexChars);

  lWchar[0] = hChar[(key >> 4) & 0xF];
  lWchar[1] = hChar[key & 0xF];
  lWchar[2] = 0;

  EfiPrint(lWchar);
}

U0 printHexU16(U16 key) {
    printHexU8((key >> 8) & 0xFF);
    printHexU8( key & 0xFF);
}

U0 printHexU32(U32 key) {
    printHexU16((key >> 16) & 0xFFFF);
    printHexU16( key & 0xFFFF);
}

U0 printHexU64(U64 key) {
    printHexU32((key >> 32) & 0xFFFFFFFF);
    printHexU32(key & 0xFFFFFFFF);
}

U0 PutChars(U64 ch) {
  "%c", ch;
}

//public U64 (*efi_handle_protocol)(U8 * Handle, CEfiGuid *Protocol, U8 **Interface, U64 p4=NULL, U64 bs = &BS, U64 fctn = CEfiBootServices.HandleProtocol);
//public U64 (*efi_locate_protocol)(CEfiGuid *Protocol, U8 *Registration, U8 **Interface, U64 p4=NULL, U64 bs = &BS, U64 fctn = CEfiBootServices.LocateProtocol);

// This gets called by the initial bootstrapper
#exe{Option(OPTf_WARN_HEADER_MISMATCH, OFF);}
U64 EfiEntry(U64 efiSystemTable, U64 imageHandle, U64 stackPtr) {

  if (!efiSystemTable) {
    return 0xBABB0020;
  }

  if (!imageHandle) {
    return 0xBABB0021;
  }

  // Set the application pointers
  ST = efiSystemTable;
  appPtrs.efi = ST;
  appPtrs.imageHandle = imageHandle;
  appPtrs.stackPointer = stackPtr; 

  ConOut = ST->ConOut;
  BS = ST->BootServices;
  RT = ST->RuntimeServices;
  ConIn = ST->ConIn;

  lWchar = (APPLICATION_ADDRESS + &wchar(U8*)) & 0xFFFFFFFFFFFFFFF0; 

  // Continue with startup
  return EfiStartup();
}

#exe{Option(OPTf_WARN_HEADER_MISMATCH, ON);}



