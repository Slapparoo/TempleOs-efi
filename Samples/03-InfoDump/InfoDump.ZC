/**
Dump out some pointers and other information 
*/

U64 AppEntry() {

  //EfiConOutClearScreen();
  //EfiConOutSetMode(4);

  "Info Dump\r\n\r\n";

//  "Vendor               "; EfiPrint(ST->FirmwareVendor); "\r\n";

  "appPtrs              0x"; printHexU64(appPtrs); "\r\n";
  "appPtrs.efi          0x"; printHexU64(appPtrs.efi); "\r\n";
  "appPtrs.imageHandle  0x"; printHexU64(appPtrs.imageHandle); "\r\n";
  "appPtrs.stackPointer 0x"; printHexU64(appPtrs.stackPointer); "\r\n";


  "Header signature     0x"; printHexU64(appPtrs.efi->Signature); "\r\n";
  "Header Revision      0x"; printHexU32(appPtrs.efi->Revision); "\r\n";
  "Header HeaderSize    0x"; printHexU32(appPtrs.efi->HeaderSize); "\r\n";
  "Header CRC           0x"; printHexU32(appPtrs.efi->CRC32); "\r\n";

  "EfiCallWrapper          0x"; printHexU64(APPLICATION_ADDRESS + &EfiMethodWrapper); "\r\n";

  "ConOut->Reset           0x"; printHexU64(ConOut->Reset); "\r\n";
  "ConOut->Mode            0x"; printHexU64(ConOut->Mode); "\r\n";


  "ConOut->Mode->MaxMode   0x"; printHexU32(ConOut->Mode->MaxMode); "\r\n";
  "ConOut->Mode->Mode      0x"; printHexU32(ConOut->Mode->Mode); "\r\n";

  "ConOut->Mode->Attribute 0x"; printHexU32(ConOut->Mode->Attribute); "\r\n";
  "ConOut->Mode->Col       0x"; printHexU32(ConOut->Mode->CursorColumn); "\r\n";
  "ConOut->Mode->Row       0x"; printHexU32(ConOut->Mode->CursorRow); "\r\n";
  "ConOut->Mode->Visible   0x"; printHexU8(ConOut->Mode->CursorVisible); "\r\n";


  //EfiConOutSetCursor(ConOut->Mode->CursorColumn+3, ConOut->Mode->CursorRow+3);

  "BootServices            0x"; printHexU64(BS); "\r\n";


  "SystemTables               0x"; printHexU64(ST); "\r\n";
  "SystemTables.NoOfEntries   0x"; printHexU64(ST->NumberOfTableEntries); "\r\n";

  U64 i = 0;
  CEfiConfigurationTable *pp = ST->ConfigurationTable;

  for(; i < ST->NumberOfTableEntries; i++, pp++) {
     " "; PrintGuid(&pp->VendorGuid); "\r\n";
  }

  U8 *mem = 0xF0000;
  U64 length;
  U8 checksum;
  while (mem < 0x100000) {
    if (mem[0] == '_' && mem[1] == 'S' && mem[2] == 'M' && mem[3] == '_') {
      length = mem[5];
      checksum = 0;
      i = 0;
      for (; 1 < length; i++) {
        checksum += mem[i];
      }
      if (checksum == 0) break;
    }
    mem += 16; 
  }

  if (mem >= 0x100000) {
    "SMBios not found\r\n";
  } else {
    "SMBios found at "; printHexU64(mem); "\r\n";
  }

}